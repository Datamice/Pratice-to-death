#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
/*
1.头结点的位置为0，特别在插入操作中，若插在表头，即NODE插在头结点前面，
*/
typedef struct Node* List;
typedef struct Node{
    int value;
    List Next;
}Node;
//初始化不需要任何参数，返回指针，在主函数里用另一个指针指向就好了，这次初始化用的是尾插法，回头可以改下头插法，因为两种方法可以实现正序和逆序
List MakeEmptyAndInitial(){
    /*下面的判断语句是对头结点申请并初妈化*/
    List L;//定义头结点
    L=(List)malloc(sizeof(Node));//malloc前面括号就是头结点L的类型，sizeof括号是指向的数据类型
    if(L == NULL)//记得永远不能用单个等号，那个是赋值号
        printf("内存空间不足");
    else
        L->Next = NULL;

    int value;
    List r=L;//申请头结点位置，尾插法，用来移动做其他操作
     /*下面语句是读入数值并按*/
    while(scanf("%d ",&value)!= EOF)// 输入结束按ctrl+z结束输入,记得要把scan 整个部分不等于EOF
    {
            List p=(List)malloc(sizeof(Node));
            p->value=value;

            r->Next=p;//这里是用空头结点的指针指向P， 不能直接用r,就变成r指向了P，没有和之前L头结点联系起来，如果直接用L也行，但后面继续连接其他新结点就很麻烦，不断用L.Next.Next,还不能直接移动L
            r=p;//这里的P什么时候释放好？测试时候如果直接在下面一释放，就发现结果错误了
    }
    r->Next=NULL;//此时r在最后一个结点，设置其指针Next为0值。
    return L;
}
int length(List L)
{
    List tem=L->Next;
    int len=0;
    while(tem)
    {
        len++;
        tem=tem->Next;
    }
    return len;
}

/*int FindKth(int K, List L)
{   int value;
    List tem=L->Next;
    for(int i=0;i<K;i++)
    {
        value=tem->value;
        tem=tem->Next;
    }
    return value;
}这是一个不好的程序，他没有限定当LIST中没有要查找的元素时怎么办，以下做修改版*/
List FindKth(int K, List L)
{   int i=1;//这里的I用来和K比较进行while循环同时还能计数，临时记数
    List tem=L->Next;//这种指定法下，将头结点视为第一个结点，记得是尾插法下的头结点，不包含任何的value,只有指针，当然啦，我们也可以在过程中去赋值
    while((tem!=NULL)&&i<K)
    {
        tem=tem->Next;
        i++;
    }

    if(i==K)//应对当TEM=NULL时退出，此时I不一定是要找的K，要判断
        return tem;
    else return NULL ;
}
List FindX(int X,List L)
{
    List tem=L;
    while((tem->value!=X)&&(tem!=NULL))
    {
        tem=tem->Next;
    }

    return tem;
}

void Insert(int X,int i,List L)//这个函数一开始写得不好，忽略了尾插法下，一个NODE插在头结点（空结点）前的情况，但实际上最好别这么插
{
    List tem=FindKth(i-1,L);
    if(tem==NULL){ printf("error"); return NULL;}


    List p=(List)malloc(sizeof(Node));
    p->value=X;
    p->Next=tem->Next;//这里为什么是这样子替换，当直接用 tem 没起到插入作用，但前面已经定义 tem从指向第一个结点开始 了
    tem->Next=p;
}


int main(){
    List L1=MakeEmptyAndInitial();
    Insert(13,5,L1);
    List tem1=L1->Next;
    while(tem1){
        printf("%d ",tem1->value);
        tem1=tem1->Next;

    }

    int a=FindKth(10, L1)->value;
    int b=FindX(5, L1)->value;
    int c=length(L1);
    /* int* a=FindKth(5, L1), findkth 这个list型指针指向结构，结构中有int 和 指针两种类型，int*a刚确定了 *a是取其中value部分，但多个value 时又容易出错，
    ;findkth是返回指针的，如果定义int a=findkth->value是合法的，但考虑到返回NULL时后面可不能加value，故最后用一个判断做如下处理*/


    printf("%d %d %d",b,a,c);
    return 0;
}

