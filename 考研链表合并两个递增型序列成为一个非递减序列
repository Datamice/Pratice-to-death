#include <stdio.h>
#include <stdlib.h>
/*合并两个整数型递增序列成为一个非递减序列并打印*/
typedef struct Node* List;
typedef struct Node{
    int value;
    List Next;
}Node;
//初始化不需要任何参数，返回指针，在主函数里用另一个指针指向就好了，这次初始化用的是尾插法，回头可以改下头插法，因为两种方法可以实现正序和逆序
List MakeEmptyAndInitial(){
    /*下面的判断语句是对头结点申请并初妈化*/
    List L;//定义头结点
    L=(List)malloc(sizeof(Node));//malloc前面括号就是头结点L的类型，sizeof括号是指向的数据类型
    if(L == NULL)//记得永远不能用单个等号，那个是赋值号
        printf("内存空间不足");
    else
        L->Next = NULL;

    int value;
    List r=L;//申请头结点位置，尾插法，用来移动做其他操作
     /*下面语句是读入数值并按*/
    while(scanf("%d",&value)!= EOF)// 输入结束按ctrl+z结束输入,记得要把scan 整个部分不等于EOF,输入的过程一定要用空格格开
    {
            List p=(List)malloc(sizeof(Node));
            p->value=value;
            r->Next=p;//这里是用空头结点的指针指向P， 不能直接用r,就变成r指向了P，没有和之前L头结点联系起来，如果直接用L也行，但后面继续连接其他新结点就很麻烦，不断用L.Next.Next,还不能直接移动L
            r=p;//这里的P什么时候释放好？测试时候如果直接在下面一释放，就发现结果错误了
    }
    r->Next=NULL;//此时r在最后一个结点，设置其指针Next为0值。
    return L;
}
void Print(List L)
{   List r=L;
    while(r->Next){
        r=r->Next;
        printf("%d ",r->value);
    }
}

List Merge(List *L1,List *L2)//其实这里可以不传引用型指针的
{   List tem1=(*L1)->Next; //记得到时实参是&L1，是L1所在的地址，那么加*号才翻译成指针
    List tem2=(*L2)->Next;
    List L3=(List)malloc(sizeof(struct Node));
    List tem3=L3;
    while(tem1&&tem2){
        if(tem1->value<=tem2->value)
           {
            tem3->Next=tem1;
            tem3=tem1;
            tem1=tem1->Next;

           } else{
            tem3->Next=tem2;
            tem3=tem2;
            tem2=tem2->Next;
           }
    }
    tem3->Next=tem2?tem2:tem1;//这句一定要会，理解成tem2空吗，空的话tem3->Next=tem1;适合只有alternative选项的时候

    (*L1)->Next=NULL;
    (*L2)->Next=NULL;
    return L3;
}
int main()
{
    List L1=MakeEmptyAndInitial();
    Print(L1);
    List L2=MakeEmptyAndInitial();
    Print(L2);
    List L3= Merge(&L1,&L2);
    Print(L3);

    return 0;
}
